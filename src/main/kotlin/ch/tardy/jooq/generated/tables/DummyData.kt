/*
 * This file is generated by jOOQ.
 */
package ch.tardy.jooq.generated.tables


import ch.tardy.jooq.generated.Public
import ch.tardy.jooq.generated.keys.DUMMY_DATA_PKEY
import ch.tardy.jooq.generated.tables.records.DummyDataRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class DummyData(
        alias: Name,
        child: Table<out Record>?,
        path: ForeignKey<out Record, DummyDataRecord>?,
        aliased: Table<DummyDataRecord>?,
        parameters: Array<Field<*>?>?
) : TableImpl<DummyDataRecord>(
        alias,
        Public.PUBLIC,
        child,
        path,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dummy_data</code>
         */
        val DUMMY_DATA = DummyData()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DummyDataRecord> = DummyDataRecord::class.java

    /**
     * The column <code>public.dummy_data.id</code>.
     */
    val ID: TableField<DummyDataRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.dummy_data.numbers</code>.
     */
    val NUMBERS: TableField<DummyDataRecord, Array<java.lang.Long?>?> = createField(DSL.name("numbers"), SQLDataType.BIGINT.arrayDataType, this, "")

    /**
     * The column <code>public.dummy_data.strings</code>.
     */
    val STRINGS: TableField<DummyDataRecord, Array<java.lang.String?>?> = createField(DSL.name("strings"), SQLDataType.VARCHAR.arrayDataType, this, "")

    /**
     * The column <code>public.dummy_data.deleted</code>.
     */
    val DELETED: TableField<DummyDataRecord, Boolean?> = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.dummy_data.created_by</code>.
     */
    val CREATED_BY: TableField<DummyDataRecord, String?> = createField(DSL.name("created_by"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>public.dummy_data.created_date</code>.
     */
    val CREATED_DATE: TableField<DummyDataRecord, OffsetDateTime?> = createField(DSL.name("created_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.dummy_data.last_modified_by</code>.
     */
    val LAST_MODIFIED_BY: TableField<DummyDataRecord, String?> = createField(DSL.name("last_modified_by"), SQLDataType.VARCHAR(200), this, "")

    /**
     * The column <code>public.dummy_data.last_modified_date</code>.
     */
    val LAST_MODIFIED_DATE: TableField<DummyDataRecord, OffsetDateTime?> = createField(DSL.name("last_modified_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<DummyDataRecord>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DummyDataRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dummy_data</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dummy_data</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.dummy_data</code> table reference
     */
    constructor() : this(DSL.name("dummy_data"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DummyDataRecord>) : this(Internal.createPathAlias(child, key), child, key, DUMMY_DATA, null)

    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<DummyDataRecord, Long?> = super.getIdentity() as Identity<DummyDataRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<DummyDataRecord> = DUMMY_DATA_PKEY
    override fun getKeys(): List<UniqueKey<DummyDataRecord>> = listOf(DUMMY_DATA_PKEY)
    override fun `as`(alias: String): DummyData = DummyData(DSL.name(alias), this)
    override fun `as`(alias: Name): DummyData = DummyData(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DummyData = DummyData(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DummyData = DummyData(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, Array<java.lang.Long?>?, Array<java.lang.String?>?, Boolean?, String?, OffsetDateTime?, String?, OffsetDateTime?> = super.fieldsRow() as Row8<Long?, Array<java.lang.Long?>?, Array<java.lang.String?>?, Boolean?, String?, OffsetDateTime?, String?, OffsetDateTime?>
}
